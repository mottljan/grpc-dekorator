apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'org.jetbrains.dokka'

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.java.srcDirs
    from sourceSets.main.kotlin.srcDirs
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from dokkaJavadoc.outputDirectory
}

artifacts {
    archives sourcesJar
    archives javadocJar
}


group = libProperties['GROUP']
version = libProperties['VERSION_NAME']

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is ->
        p.load(is)
    }
    p.each { name, value ->
        ext[name] = value
    }
} else {
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_KEY_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
}

publishing {
    publications {
        release(MavenPublication) {
            // The coordinates of the library, being set from variables
            groupId libProperties['GROUP']
            artifactId PUBLISH_ARTIFACT_ID
            version libProperties['VERSION_NAME']

            artifact("$buildDir/libs/${project.getName()}-${version}.jar")
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = PUBLISH_ARTIFACT_ID
                description = POM_DESCRIPTION
                url = libProperties['SITE_URL']
                licenses {
                    license {
                        name = libProperties['POM_LICENCE_NAME']
                        url = libProperties['POM_LICENCE_URL']
                    }
                }
                developers {
                    developer {
                        id = libProperties['POM_DEVELOPER_ID']
                        name = libProperties['POM_DEVELOPER_NAME']
                        email = libProperties['POM_DEVELOPER_EMAIL']
                    }
                }
                scm {
                    connection = libProperties['POM_SCM_CONNECTION']
                    developerConnection = libProperties['POM_SCM_DEVELOPER_CONNECTION']
                    url = libProperties['POM_SCM_URL']
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        if (it.group != null && it.name != null && it.name != "unspecified") {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
    // The repository to publish to, Sonatype/MavenCentral
    repositories {
        maven {
            // This is an arbitrary name, you may also use "mavencentral" or
            // any other name that's descriptive for you
            name = "sonatype"
            url = libProperties['SONATYPE_URL']
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications
}

nexusStaging {
    packageGroup = libProperties['GROUP']
    stagingProfileId = sonatypeStagingProfileId
    username = ossrhUsername
    password = ossrhPassword
    serverUrl = 'https://s01.oss.sonatype.org/service/local'
}

afterEvaluate {
    def assembleTask = tasks.getByName("assemble")
    def pomFileGenerationTask = tasks.getByName("signReleasePublication")
    pomFileGenerationTask.dependsOn(assembleTask)
}
